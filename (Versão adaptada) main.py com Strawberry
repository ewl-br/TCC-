from flask import Flask, request, jsonify
from flask_cors import CORS
import mysql.connector
from openai import OpenAI
from key import API_KEY
import json
import strawberry
from strawberry.flask.views import GraphQLView


#configuraÃ§Ã£o Flask
app = Flask(__name__)
CORS(app)


#ConexÃ£o com MySQL

conexao_BD = {
    "host": "localhost",
    "user": "root",
    "password": "kkcobens",
    "database": "estudamais"
}


#Cliente OpenAI
client = OpenAI(api_key=API_KEY)

def gerar_plano_com_ia(materias, prova):
    prompt = f"""
    Estou criando um plano de estudos para {prova}.
    O usuÃ¡rio escolheu os materias: {', '.join(materias)}.
    Gere uma lista de assuntos para revisar e um plano de estudos simples com horÃ¡rios.
    Responda no formato JSON com as chaves:
    - "plano_de_estudo": lista de strings com os horÃ¡rios
    - "assuntos_sugeridos": dicionÃ¡rio onde cada tema Ã© uma lista de assuntos
    """
    try:
        response = client.chat.completions.create(
            model="gpt-5",
            messages=[
                {"role": "system", "content": f"VocÃª Ã© uma assistente pedagÃ³gica especialista em {prova}."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"}
        )
        conteudo = response.choices[0].message.content
        return json.loads(conteudo)
    except Exception as e:
        return {"erro": f"Falha ao gerar resposta da IA: {str(e)}"}


#rotas REST (mantidas)

@app.route("/")
def home():
    return "API funcionando. Acesse /graphql para usar GraphQL."

@app.route("/agenda")
def agenda():
    conn = mysql.connector.connect(**conexao_BD)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM materias")
    materias = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(materias)

#(mantÃ©m tuas outras rotas /enem, /ssa1, etc.)


#schema GraphQL (Strawberry)

@strawberry.type
class Materia:
    id: int
    nome: str
    descricao: str   # professor removido daqui

@strawberry.type
class Query:
    @strawberry.field
    def hello(self) -> str:
        return "OlÃ¡, mundo do GraphQL ðŸš€"

    @strawberry.field
    def listar_materias(self) -> list[Materia]:
        conn = mysql.connector.connect(**conexao_BD)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM materias")
        materias = cursor.fetchall()
        cursor.close()
        conn.close()
        # sÃ³ pega colunas id, nome e descricao
        return [Materia(id=m["id"], nome=m["nome"], descricao=m["descricao"]) for m in materias]

    @strawberry.field
    def gerar_plano(self, materias: list[str], prova: str) -> dict:
        return gerar_plano_com_ia(materias, prova)

schema = strawberry.Schema(query=Query)

#rota GraphQL
app.add_url_rule(
    "/graphql",
    view_func=GraphQLView.as_view("graphql_view", schema=schema, graphiql=True)
)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
