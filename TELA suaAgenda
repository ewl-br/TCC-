import React, { useContext, useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  ImageBackground,
  Modal,
  TextInput,
  ActivityIndicator,
} from "react-native";
import { CronogramaContext, CronogramaKey } from "../../../context/CronogramaContext";
import { useRouter } from "expo-router";
import { SafeAreaView } from "react-native-safe-area-context";
import { auth } from "../../../config/firebaseConfig";

const dataAtual = new Intl.DateTimeFormat("pt-BR", {
  day: "numeric",
  month: "long",
  year: "numeric",
}).format(new Date());

export default function SuaAgenda() {
  const { cronogramas, setCronogramas, avaliacoes, cronogramaSelecionado, setCronogramaSelecionado } =
    useContext(CronogramaContext);

  const [nomeUsuario, setNomeUsuario] = useState("Usu√°rio");
  const [modalVisivel, setModalVisivel] = useState(false);
  const [itemEditando, setItemEditando] = useState<any>(null);
  const [nome, setNome] = useState("");
  const [descricao, setDescricao] = useState("");
  const [grau, setGrau] = useState("");

  const [loading, setLoading] = useState(false);
  const [erro, setErro] = useState("");

  const router = useRouter();
  const cronogramaAtual = cronogramas[cronogramaSelecionado];

  useEffect(() => {
    const user = auth.currentUser;
    setNomeUsuario(user?.displayName || "Usu√°rio");
  }, []);

  // FETCH API
 useEffect(() => {
  const fetchAgenda = async () => {
    setLoading(true);
    setErro("");
    try {
      const categorias = ["ENEM", "SSA1", "SSA2", "SSA3"];

      const novosCronogramas: any = {};

      for (const cat of categorias) {
        const res = await fetch(`http://172.20.10.3:5000/gerar_agenda?tipo=${cat}`);
        if (!res.ok) throw new Error(`Erro ao buscar ${cat}: ${res.status}`);
        const data = await res.json();

        const listaDias: any[] = [];

        if (data.agenda && Array.isArray(data.agenda)) {
          data.agenda.forEach((semana: any[]) => {
            if (Array.isArray(semana)) {
              semana.forEach((dia: any) => {
                if (
                  dia &&
                  Array.isArray(dia["assuntos do dia"]) &&
                  Array.isArray(dia["horario de estudar cada assunto"])
                ) {
                  listaDias.push({
                    dia: dia["dia do estudo"],
                    materias: dia["assuntos do dia"].map((nome: string, idx: number) => ({
                      nome,
                      horario: dia["horario de estudar cada assunto"][idx] || "",
                      descricao: "",
                      prioridade: "M√©dia",
                    })),
                  });
                }
              });
            }
          });
        }

        novosCronogramas[cat] = listaDias;
      }

      setCronogramas((prev) => ({
        ...prev,
        ...novosCronogramas,
      }));
    } catch (err: any) {
      console.log("Erro ao buscar agenda:", err);
      setErro("N√£o foi poss√≠vel carregar as agendas.");
    } finally {
      setLoading(false);
    }
  };

  fetchAgenda();
}, [setCronogramas]);


  const abrirEdicao = (item: any) => {
    setItemEditando(item);
    setNome(item.titulo || item.nome || "");
    setDescricao(item.observacoes || item.descricao || "");
    setGrau(item.grau || "");
    setModalVisivel(true);
  };

  const salvarEdicao = () => {
    if (itemEditando) {
      itemEditando.titulo = nome;
      itemEditando.observacoes = descricao;
      itemEditando.grau = grau;
    }
    setModalVisivel(false);
  };

  return (
    <ImageBackground
      source={require("../../../assets/images/agenda2.png")}
      style={styles.background}
      resizeMode="cover"
    >
      <View style={styles.overlay} />

      <SafeAreaView style={styles.safeArea}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()} style={styles.voltarBotao}>
            <Text style={styles.voltarTexto}>‚Üê</Text>
          </TouchableOpacity>
          <View style={styles.headerTextos}>
            <View style={styles.nomeDataContainer}>
              <Text style={styles.userName}>Ol√° {nomeUsuario} üëã</Text>
              <Text style={styles.dataAtual}>{dataAtual}</Text>
            </View>
            <Text style={styles.subTitulo}>
              Segue o cronograma da sua semana de {cronogramaSelecionado}.
            </Text>
          </View>
        </View>

        <View style={styles.listaCategorias}>
          {["ENEM", "SSA1", "SSA2", "SSA3", "Avalia√ß√£o Escolar"].map((item) => (
            <TouchableOpacity key={item} onPress={() => setCronogramaSelecionado(item as CronogramaKey)}>
              <Text
                style={[
                  styles.categoriaTexto,
                  cronogramaSelecionado === item && styles.categoriaSelecionada,
                ]}
              >
                {item}
              </Text>
            </TouchableOpacity>
          ))}
        </View>

        <ScrollView contentContainerStyle={styles.scroll}>
          {loading ? (
            <ActivityIndicator size="large" color="#21A39B" style={{ marginTop: 50 }} />
          ) : erro ? (
            <Text style={styles.semConteudoTextoDestacado}>{erro}</Text>
          ) : cronogramaSelecionado === "Avalia√ß√£o Escolar" ? (
            <>
              {avaliacoes.length === 0 ? (
                <Text style={styles.semConteudoTextoDestacado}>
                  Nenhuma avalia√ß√£o cadastrada. V√° at√© a tela de configura√ß√£o para adicionar.
                </Text>
              ) : (
                avaliacoes.map((avaliacao, idx) => (
                  <View key={idx} style={styles.card}>
                    <Text style={styles.cardTitulo}>{avaliacao.titulo}</Text>

                    {avaliacao.grau && <Text style={styles.cardInfo}>Grau: {avaliacao.grau}</Text>}
                    {avaliacao.observacoes && (
                      <View style={{ marginTop: 4 }}>
                      {avaliacao.observacoes.split("|").map((parte, i) => (
                        <Text key={i} style={styles.cardInfo}>
                        {parte.trim()}
                         </Text>
                       ))}
                     </View>
                    )}
                    {avaliacao.nota != null && <Text style={styles.cardInfo}>‚≠ê Nota: {avaliacao.nota}</Text>}

                    <TouchableOpacity
                      style={styles.botaoEditar}
                      onPress={() => abrirEdicao(avaliacao)}
                    >
                      <Text style={styles.textoEditar}>Editar</Text>
                    </TouchableOpacity>
                  </View>
                ))
              )}
            </>
          ) : cronogramaAtual && cronogramaAtual.length > 0 ? (
            cronogramaAtual.map((dia, idx) => (
              <View key={idx} style={styles.card}>
                <Text style={styles.cardTituloMaior}>{dia.dia}</Text>
                {dia.materias.length === 0 ? (
                  <Text style={styles.semConteudoTextoDestacado}>Nenhuma mat√©ria cadastrada</Text>
                ) : (
                  dia.materias.map((materia, mIdx) => (
                    <View key={mIdx} style={styles.materia}>
                      <View style={styles.materiaHeader}>
                        <View
                          style={[
                            styles.prioridadeBola,
                            {
                              backgroundColor:
                                materia.prioridade === "Alta"
                                  ? "#e53935"
                                  : materia.prioridade === "M√©dia"
                                  ? "#fdd835"
                                  : "#43a047",
                            },
                          ]}
                        />
                        <Text style={styles.materiaNome}>{materia.nome}</Text>
                      </View>
                      <Text style={styles.cardInfo}>üïë {materia.horario}</Text>
                      <Text style={styles.cardInfo}>{materia.descricao}</Text>

                      <TouchableOpacity
                        style={styles.botaoEditar}
                        onPress={() => abrirEdicao(materia)}
                      >
                        <Text style={styles.textoEditar}>Editar</Text>
                      </TouchableOpacity>
                    </View>
                  ))
                )}
              </View>
            ))
          ) : (
            <Text style={styles.semConteudoTextoDestacado}>Nenhum cronograma cadastrado ainda.</Text>
          )}
        </ScrollView>

        <Modal visible={modalVisivel} transparent animationType="slide">
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitulo}>Editar Item</Text>

              <TextInput
                style={styles.input}
                value={nome}
                onChangeText={setNome}
                placeholder="T√≠tulo"
              />
              <TextInput
                style={styles.input}
                value={descricao}
                onChangeText={setDescricao}
                placeholder="Descri√ß√£o"
              />
              <TextInput
                style={styles.input}
                value={grau}
                onChangeText={setGrau}
                placeholder="Grau (1¬∫, 2¬∫, 3¬∫ ano)"
              />

              <View style={styles.modalBotoes}>
                <TouchableOpacity
                  style={styles.modalBotaoCancelar}
                  onPress={() => setModalVisivel(false)}
                >
                  <Text style={styles.modalBotaoTexto}>Cancelar</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.modalBotaoSalvar}
                  onPress={salvarEdicao}
                >
                  <Text style={styles.modalBotaoTexto}>Salvar</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </SafeAreaView>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  background: { flex: 1 },
  overlay: { ...StyleSheet.absoluteFillObject, backgroundColor: "rgba(21, 76, 76, 0.6)" },
  safeArea: { flex: 1 },

  header: { flexDirection: "row", alignItems: "flex-start", gap: 12, padding: 16 },
  voltarBotao: { paddingTop: 4 },
  voltarTexto: { fontSize: 28, color: "white", fontWeight: "bold" },

  headerTextos: { flex: 1 },
  nomeDataContainer: { flexDirection: "row", alignItems: "center", gap: 12, marginBottom: 4 },
  userName: { fontSize: 22, fontWeight: "bold", color: "white" },
  dataAtual: { fontSize: 16, color: "white" },
  subTitulo: { fontSize: 18, fontWeight: "bold", color: "white", marginBottom: 4 },

  listaCategorias: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginHorizontal: 16, marginBottom: 8 },
  categoriaTexto: { fontSize: 14, color: "white", paddingVertical: 4, paddingHorizontal: 8, borderRadius: 6, backgroundColor: "#143230" },
  categoriaSelecionada: { backgroundColor: "#21A39B", fontWeight: "bold" },

  scroll: { padding: 16 },
  card: { marginBottom: 16, backgroundColor: "#0E403D", padding: 14, borderRadius: 12, elevation: 3, borderWidth: 1, borderColor: "#21A39B" },
  cardTitulo: { fontSize: 18, fontWeight: "bold", marginBottom: 6, color: "white" },
  cardTituloMaior: { fontSize: 20, fontWeight: "bold", marginBottom: 8, color: "#fff" },
  cardInfo: { fontSize: 15, color: "white", marginBottom: 4 },
  materia: { marginBottom: 12, borderTopWidth: 1, borderTopColor: "#ddd", paddingTop: 8 },
  materiaHeader: { flexDirection: "row", alignItems: "center", gap: 6, marginBottom: 4 },
  prioridadeBola: { width: 12, height: 12, borderRadius: 6 },
  materiaNome: { fontSize: 16, fontWeight: "600", color: "white" },
  botaoEditar: { marginTop: 8, backgroundColor: "#143230", paddingVertical: 8, borderRadius: 8, alignItems: "center", alignSelf: "flex-end", paddingHorizontal: 16 },
  textoEditar: { color: "white", fontWeight: "bold" },

  semConteudoTextoDestacado: { fontSize: 18, fontWeight: "bold", color: "#ffffffff", textAlign: "center", marginVertical: 30 },

  modalOverlay: { flex: 1, backgroundColor: "rgba(0,0,0,0.6)", justifyContent: "center", alignItems: "center" },
  modalContent: { width: "85%", backgroundColor: "white", padding: 20, borderRadius: 12 },
  modalTitulo: { fontSize: 20, fontWeight: "bold", marginBottom: 12, color: "#154C4C" },
  input: { borderWidth: 1, borderColor: "#21A39B", borderRadius: 8, padding: 10, marginBottom: 10 },
  modalBotoes: { flexDirection: "row", justifyContent: "flex-end", gap: 12, marginTop: 10 },
  modalBotaoCancelar: { paddingVertical: 8, paddingHorizontal: 14, backgroundColor: "#888", borderRadius: 6 },
  modalBotaoSalvar: { paddingVertical: 8, paddingHorizontal: 14, backgroundColor: "#21A39B", borderRadius: 6 },
  modalBotaoTexto: { color: "white", fontWeight: "bold" },
});
